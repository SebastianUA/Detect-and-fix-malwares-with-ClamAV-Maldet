#!/bin/bash
#
# CREATED:
# vitaly.n@gogvo.com
# olexey.g@gogvo.com
#
# Set some colors for status OK, FAIL and titles
#
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

SETCOLOR_TITLE="echo -en \\033[1;36m" #Fuscia

function Operation_status {  
			    if [ $? -eq 0 ]; then
				        	  $SETCOLOR_SUCCESS;	
						  echo -n "$(tput hpa $(tput cols))$(tput cub 6)[OK]"	
						  $SETCOLOR_NORMAL;
     					 	  echo;
			    else
			         $SETCOLOR_FAILURE;
				 echo -n "$(tput hpa $(tput cols))$(tput cub 6)[fail]"
				 $SETCOLOR_NORMAL;
				 echo;											
		  	    fi
			 }
#
# For LOGS
#
LOG_FILE="/var/log/detect_and_fix_malwares.log"
if [ ! -f "$LOG_FILE" ]; then
				echo "File detect_and_fix_malwares.log NOT FOUND in the folder /var/log";
				touch /var/log/server_migrate.log
				echo "The $LOG_FILE was CREATED";
else
	echo "File '$LOG_FILE' Exists"	
fi		
exec > >(tee -a ${LOG_FILE} )
exec 2> >(tee -a ${LOG_FILE} >&2)

#
# Dir for maldet reports
#
Maldet_report_dir="/root/maldet/reports"
if [ ! -d "$Maldet_report_dir" ]; then
					echo "Directory '$Maldet_report_dir' NOT FOUND";
					mkdir -p /root/maldet/reports
					echo "The '$Maldet_report_dir' was CREATED";
else
	echo "File '$Maldet_report_dir' Exists"
fi

# create the new function Maldet_scan
function Maldet_scan () {
			  echo "Start maldet scan" ;
			  if ! type -path "pv" > /dev/null 2>&1; then
						      		      yum install pv -y
			  else
			       echo "PV was INSTALLED on this server: `hostname`";
			  fi			       
			  if ! type -path "maldet" > /dev/null 2>&1; then 
				  					cd /usr/local/src && && wget http://www.rfxn.com/downloads/maldetect-current.tar.gz && tar -xzvf maldetect-current.tar.gz && cd maldetect-* && sh install.sh
									rm -rf /usr/local/src/maldetect-*
									maldet -u && maldet -d
									rm -rf /etc/cron.d/maldet_pub && rm -rf /etc/cron.daily/maldet
								else 
									echo "Maldet was INSTALLED on this server: `hostname`";
								        maldet -u ; maldet -d
									if [ -f "/etc/cron.d/maldet_pub" ]; then
														rm -rf /etc/cron.d/maldet_pub
									fi
									if [ -f "/etc/cron.daily/maldet" ]; then
									       					rm -rf /etc/cron.daily/maldet
									fi					
			  fi
		          Count_sent_emails=$(tail -n 100000 /var/log/exim_mainlog| grep cwd=/home| cut -d"=" -f2| awk '{print $1}'| sort| uniq -c| awk '$1>200 {print $2}'| cut -d"/" -f3)
			  for i in `echo $Count_sent_emails|xargs -I{} -n1 echo {}` ; do
                                                 	     				Start_maldet_scan=$(/usr/local/sbin/maldet -a /home/$i > /root/maldet/reports/$i-$( date '+%Y-%m-%d_%H-%M-%S' ))
											done;
			  return 0
		  }

#		  
# start function Maldet_scan
#
Maldet_scan
		 
# create the new function detect_and_fix_malwares
function Detect_malwares () {
				  	echo "START Function Detect_malwares";
					#
					#parsing maldet reports
					#
					List_reports=$(ls -al /root/maldet/reports/* | awk '{ print $9 }')
					if [ `echo $List_reports| wc -l` -eq 0 ]; then	                                      
										      echo "The folder /root/maldet/reports is EMPTY";
										      exit 1;
					else
					     for i in `echo $List_reports|xargs -I{} -n1 echo {}`; do
						     				Count_malware_hits=$(cat $i |xargs -I{} -n1 echo {}| grep -E ".* malware hits .*"| awk ' {print "HITS: "$11}'| cut -d "," -f1)
										if [ "$(echo $Count_malware_hits| awk ' {print $2}')" = '0' ]; then
																		   echo "HITS =0";
																		   #rm -rf files with hits=0
																		   exit 1;
										else
										     echo "HITS >0 ";
										     Maldet_report_ID=$(cat $i | grep -E ".* maldet --report .*"| awk ' {print $11}')
										     echo "Maldet_report_ID = $Maldet_report_ID";
										     for ii in `echo $Maldet_report_ID|xargs -I{} -n1 echo {}`; do
											     							    Output_file=$(EDITOR=cat maldet --report $ii > /root/maldet/reports/ID-$ii-data-$( date '+%Y-%m-%d_%H-%M-%S' ))
											     							     echo "Output_files are : $Output_file";
														     				done;
										    Sed_and_Grep_ID=$(ls -al /root/maldet/reports/ID-* | awk '{ print $9 }'| cut -d "/" -f5)
										    for iii in `echo $Sed_and_Grep_ID|xargs -I{} -n1 echo {}`; do
																  		  #
											     					  		  # delete empty str
																  		  #
																  		  #sed -i '/^$/d' $Output_file
																  		  #
																  		  # delete first 10 strs
																  		  #
										     								  sed '1,10d' /root/maldet/reports/$iii > /root/maldet/reports/greped-ID-$ii-data-$( date '+%Y-%m-%d_%H-%M-%S' )
																	  	done;
										    Count_Sed_and_Grep_ID_greped=$(ls -al /root/maldet/reports/greped-ID-* | awk '{ print $9 }'| cut -d "/" -f5)
										    for iiii in `echo $Count_Sed_and_Grep_ID_greped|xargs -I{} -n1 echo {}`; do
											    									Output_file_for_fix=$(cat /root/maldet/reports/$iiii > /root/maldet/reports/Output_file_for_fix.log)
											    									echo "Output_file_for_fix: $Output_file_for_fix";
																			     done;
		   								     								    
										fi										     
									    done;	
					fi					
					return 0
			            }
#
# Start function detect_and_fix_malwares
#
Detect_malwares;
function Fix_or_delete_malwares_files () {
				    	    echo "Start function fix_or_delete_malwares_files";
					    #
					    # variables for malewares
					    #
					    Check_type_maleware=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $1 }')
					    for i in `echo $Check_type_maleware`; do
						    					  #if [ "$(echo $i)" = '{HEX}php.brute.bf1lic.186' ]; then
											  #							  Maleware_file=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $2 }')
											  #fi							  
									                  if [ "$(echo $i)" = '{HEX}base64.inject.unclassed.7' ]; then
												  						     Maleware_file=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $3 }')
																		     sed -i 's/<?php.*eval(base64_decode.*?>//' $Maleware_file	
			     								  elif [ "$(echo $i)" = '{HEX}php.cmdshell.unclassed.358' ]; then
												  							Maleware_file=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $3 }')
																			sed -i 's/preg_replace.*//' $Maleware_file
											  elif [ "$(echo $i)" = '{HEX}php.base64.v23au.184' ]; then
																		  Maleware_file=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $3 }')
						      												  rm -rfv $Maleware_file
											  elif [ "$(echo $i)" = '{CAV}PHP.Trojan.Uploader' ]; then
																		 Maleware_file=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $3 }')
								       										 rm -rf $Maleware_file
	 										  elif [ "$(echo $i)" = '{CAV}Php.Trojan.StopPost' ]; then  
												   						  Maleware_file=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $3 }')
																		  rm -rfv $Maleware_file
											  elif [ "$(echo $i)" = '{CAV}Php.Malware.Mailbot-1' ]; then
											  							  Maleware_file=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $3 }')
																		  rm -rf $Maleware_file
											  else
				  								echo "Sorry, but I don't have this type of maleware!";
			      									Maleware_file=$(cat /root/maldet/reports/Output_file_for_fix.log |xargs -I{} -n1 echo {} | awk '{ print $1,$2,$3 }' > /root/maldet/reports/Unknown_maleware.log)									
											  fi							  
										  	done;
					  }
#
# Start function fix_or_delete_malwares_files
#
Fix_or_delete_malwares_files()				  

echo "|---------------------------------------------------|";
echo "|--------------------FINISHED-----------------------|";
echo "|---------------------------------------------------|";

